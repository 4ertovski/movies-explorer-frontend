{"ast":null,"code":"import { checkResponse } from './utils';\nexport const BASE_URL = 'https://api.shmovies.nomoredomains.rocks';\nexport const register = (name, email, password) => {\n  return fetch(`${BASE_URL}/signup`, {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      name,\n      email,\n      password\n    })\n  }).then(res => checkResponse(res));\n};\nexport const authorize = (email, password) => {\n  return fetch(`${BASE_URL}/signin`, {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      email,\n      password\n    })\n  }).then(res => checkResponse(res));\n};\nexport const getContent = token => {\n  return fetch(`${BASE_URL}/users/me`, {\n    method: 'GET',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n      Authorization: `Bearer ${token}`\n    }\n  }).then(res => checkResponse(res));\n};\n\n// метод делает запрос серверу и получает данные профиля\nexport const getUserInfo = () => {\n  return fetch(`${BASE_URL}/users/me`, {\n    method: 'GET',\n    headers: {\n      Authorization: `Bearer ${localStorage.getItem('jwt')}`,\n      'Content-Type': 'application/json'\n    }\n  }).then(res => checkResponse(res));\n};\n\n// метод изменяет данные профиля на сервере\nexport const setUserInfo = data => {\n  // console.log(data);\n  return fetch(`${BASE_URL}/users/me`, {\n    method: 'PATCH',\n    //метод запроса\n    headers: {\n      Authorization: `Bearer ${localStorage.getItem('jwt')}`,\n      'Content-Type': 'application/json'\n    },\n    //заголовки запроса\n    body: JSON.stringify({\n      //тело запроса\n      name: data.name,\n      //в name передаем значение name объекта, переданного в setUserInfo\n      email: data.email //в about передаем значение about объекта, переданного в setUserInfo\n    })\n  }).then(res => checkResponse(res));\n};\nexport const getCards = () => {\n  return fetch(`${BASE_URL}/movies`, {\n    method: 'GET',\n    headers: {\n      Authorization: `Bearer ${localStorage.getItem('jwt')}`,\n      'Content-Type': 'application/json'\n    }\n  }).then(res => checkResponse(res));\n};\n\n// метод добавления новой карточки на сервер\nexport const postCard = data => {\n  // console.log(data);\n  return fetch(`${BASE_URL}/movies`, {\n    method: 'POST',\n    headers: {\n      Authorization: `Bearer ${localStorage.getItem('jwt')}`,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      country: data.country,\n      director: data.director,\n      duration: data.duration,\n      year: data.year,\n      description: data.description,\n      image: 'https://api.nomoreparties.co' + data.image.url,\n      trailerLink: data.trailerLink,\n      thumbnail: 'https://api.nomoreparties.co' + data.image.formats.thumbnail.url,\n      movieId: data.id,\n      nameRU: data.nameRU,\n      nameEN: data.nameEN\n    })\n  }).then(res => checkResponse(res));\n};\n\n// метод удаления карточки с сервера\nexport const deleteCard = cardId => {\n  return fetch(`${BASE_URL}/movies/${cardId}`, {\n    method: 'DELETE',\n    headers: {\n      Authorization: `Bearer ${localStorage.getItem('jwt')}`,\n      'Content-Type': 'application/json'\n    }\n  }).then(res => checkResponse(res));\n};","map":{"version":3,"names":["checkResponse","BASE_URL","register","name","email","password","fetch","method","headers","Accept","body","JSON","stringify","then","res","authorize","getContent","token","Authorization","getUserInfo","localStorage","getItem","setUserInfo","data","getCards","postCard","country","director","duration","year","description","image","url","trailerLink","thumbnail","formats","movieId","id","nameRU","nameEN","deleteCard","cardId"],"sources":["/Users/les/dev/movies-explorer-frontend/src/utils/MainApi.js"],"sourcesContent":["import { checkResponse } from './utils';\n\nexport const BASE_URL = 'https://api.shmovies.nomoredomains.rocks';\n\nexport const register = (name, email, password) => {\n    return fetch(`${BASE_URL}/signup`, {\n        method: 'POST',\n        headers: {\n            Accept: 'application/json',\n            'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ name, email, password }),\n    }).then((res) => checkResponse(res));\n};\n\nexport const authorize = (email, password) => {\n    return fetch(`${BASE_URL}/signin`, {\n        method: 'POST',\n        headers: {\n            Accept: 'application/json',\n            'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ email, password }),\n    }).then((res) => checkResponse(res));\n};\n\nexport const getContent = (token) => {\n    return fetch(`${BASE_URL}/users/me`, {\n        method: 'GET',\n        headers: {\n            Accept: 'application/json',\n            'Content-Type': 'application/json',\n            Authorization: `Bearer ${token}`,\n        },\n    }).then((res) => checkResponse(res));\n};\n\n// метод делает запрос серверу и получает данные профиля\nexport const getUserInfo = () => {\n    return fetch(`${BASE_URL}/users/me`, {\n        method: 'GET',\n        headers: {\n            Authorization: `Bearer ${localStorage.getItem('jwt')}`,\n            'Content-Type': 'application/json',\n        },\n    }).then((res) => checkResponse(res));\n};\n\n// метод изменяет данные профиля на сервере\nexport const setUserInfo = (data) => {\n    // console.log(data);\n    return fetch(`${BASE_URL}/users/me`, {\n        method: 'PATCH', //метод запроса\n        headers: {\n            Authorization: `Bearer ${localStorage.getItem('jwt')}`,\n            'Content-Type': 'application/json',\n        }, //заголовки запроса\n        body: JSON.stringify({\n            //тело запроса\n            name: data.name, //в name передаем значение name объекта, переданного в setUserInfo\n            email: data.email, //в about передаем значение about объекта, переданного в setUserInfo\n        }),\n    }).then((res) => checkResponse(res));\n};\n\nexport const getCards = () => {\n    return fetch(`${BASE_URL}/movies`, {\n        method: 'GET',\n        headers: {\n            Authorization: `Bearer ${localStorage.getItem('jwt')}`,\n            'Content-Type': 'application/json',\n        },\n    }).then((res) => checkResponse(res));\n};\n\n// метод добавления новой карточки на сервер\nexport const postCard = (data) => {\n    // console.log(data);\n    return fetch(`${BASE_URL}/movies`, {\n        method: 'POST',\n        headers: {\n            Authorization: `Bearer ${localStorage.getItem('jwt')}`,\n            'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n            country: data.country,\n            director: data.director,\n            duration: data.duration,\n            year: data.year,\n            description: data.description,\n            image: 'https://api.nomoreparties.co' + data.image.url,\n            trailerLink: data.trailerLink,\n            thumbnail: 'https://api.nomoreparties.co' + data.image.formats.thumbnail.url,\n            movieId: data.id,\n            nameRU: data.nameRU,\n            nameEN: data.nameEN,\n        }),\n    }).then((res) => checkResponse(res));\n};\n\n// метод удаления карточки с сервера\nexport const deleteCard = (cardId) => {\n    return fetch(`${BASE_URL}/movies/${cardId}`, {\n        method: 'DELETE',\n        headers: {\n            Authorization: `Bearer ${localStorage.getItem('jwt')}`,\n            'Content-Type': 'application/json',\n        },\n    }).then((res) => checkResponse(res));\n};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}